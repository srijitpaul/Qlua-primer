
-- ************************************************************************************
-- * Prints information 
-- ************************************************************************************

total_timer = timer("total time")

-- print parameters
printf("# [test] Dimensions                = %d %d %d %d\n", dims[1], dims[2], dims[3], dims[4])
printf("# [test] Multigrid Inverter\n")
printf("#\t light quark mass    = %g\n", mq_l)
printf("#\t light quark kappa   = %g\n", kappa_l)
printf("#\t Boundary condition  = %d, %d, %d, %d\n", quark_bc[1], quark_bc[2], quark_bc[3], quark_bc[4])

-- initialize param set for writing propagators
write_param = {
	["m_q"]         = mq_l,
	["c_sw"]        = csw,
	["ferm_bc"]     = quark_bc,
	["ensemble"]    = conf_filename,
	["action_type"] = "clover",
	["solver_eps"]  = mg_max_relerr,
	["src_pos"]     = {-1, -1, -1},
	["src_t"]       = -1
}
-- ************************************************************************************
-- * read configuration
-- ************************************************************************************
--read configuration (HERE YOU PUT THE LOCATION OF THE GAUGE CONFIGURATION)
conf_name = string.format("%s/%s", conf_name_prefix, conf_filename)
printf("# [test] Reading configuration at %s\n", conf_name)
u = load_ildg(L, conf_name)

-- Plaquette
printf("# [test] Plaquette (original) = %12.10f\n", plaquette_full(u))

-- ************************************************************************************
-- * make the light / strange solver
-- ************************************************************************************
local light_propagator_packed_list   = {}
light_solver   = make_mg_solver (L, u, mg_block, mg_max_abserr, mg_max_relerr, quark_bc, kappa_l, csw )

-- ************************************************************************************ 
-- * INVERSIONS FOR FWD PROPAGATORS AND SEQUENTIAL PROPAGATORS;
-- * CONTRACTIONS FOR 2-POINT AND 3-POINT FUNCTIONS USING ONLY FWD AND SEQ
-- *
-- * loop on base source locations
-- ************************************************************************************
for i_src, v_src in ipairs(source_locations) do

  local src_loc_timer = timer("Time for each source location")
  local t   = v_src["t"]
  local pos = v_src["pos"]
  printf("# [test] base source location[%d] = (%d, %d, %d) t=%d\n", i_src, pos[1], pos[2], pos[3], t)
  -- ************************************************************************************
  -- ************************************************************************************
  light_propagator_packed_list[i_src]   = L:DiracPropagator()


  -- ************************************************************************************
  -- * loop on coherent source locations
  -- ************************************************************************************
  for i_coherent = 0, n_coherent_source - 1 do

    -- * set original (i_coherent = 0) or coherent source location (i_coherent > 0)
   
    local t_coherent = ( t + i_coherent * (L[3]/n_coherent_source) ) % L[3]

    -- * set the shifted, coherent source location
    local pos_coherent = {}
    pos_coherent[1] = ( pos[1]  + i_coherent * (L[0] / n_coherent_source) ) % L[0]
    pos_coherent[2] = ( pos[2]  + i_coherent * (L[1] / n_coherent_source) ) % L[1]
    pos_coherent[3] = ( pos[3]  + i_coherent * (L[2] / n_coherent_source) ) % L[2]

    local source_position = vector.int(4)
    source_position[0] = pos_coherent[1]
    source_position[1] = pos_coherent[2]
    source_position[2] = pos_coherent[3]
    source_position[3] = t_coherent

    -- ************************************************************************************
    -- * point-to-all forward propagator
    -- ************************************************************************************

    local light_propagator = L:DiracPropagator()

    -- * set a point source 
    local ttimer = timer("light forward source")
    local dv = point_source (L, pos_coherent[1], pos_coherent[2], pos_coherent[3], t_coherent )
    local source = dv
    ttimer("done")

    -- ************************************************************************************
    -- * light forward propagator
    -- ************************************************************************************
    ttimer = timer("light forward inversion")
    light_propagator = light_solver(source, kappa_l)
    ttimer("done")

    -- * delete the source
    source = nil
    
    -- ************************************************************************************
    -- * Write propagator
    -- ************************************************************************************
    ttimer = timer("Writing propagator")
    -- write the propagator
    if write_forward_propagator then
	write_param["name"]    = light_propfile_prefix
        write_param["src_pos"] = pos
        write_param["src_t"]   = t

        write_propagator_lime (light_propagator, write_param)

    end    
    ttimer = timer("done")
    light_propagator = nil
    
    show_mem("# checkpoint 1.5")    

  end  -- of loop on coherent source locations
end -- source locations
total_timer("done")
