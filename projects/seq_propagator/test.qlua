
-- ************************************************************************************
-- * Prints information 
-- ************************************************************************************

total_timer = timer("total time")

-- print parameters
printf("# [test] Dimensions                = %d %d %d %d\n", dims[1], dims[2], dims[3], dims[4])
printf("# [test] Multigrid Inverter\n")
printf("#\t light quark mass    = %g\n", mq_l)
printf("#\t light quark kappa   = %g\n", kappa_l)
printf("#\t Boundary condition  = %d, %d, %d, %d\n", quark_bc[1], quark_bc[2], quark_bc[3], quark_bc[4])

-- ************************************************************************************
-- * read configuration
-- ************************************************************************************
--read configuration (HERE YOU PUT THE LOCATION OF THE GAUGE CONFIGURATION)
conf_name = string.format("%s/%s/%s.%s", conf_name_prefix, ensemble_name, ensemble_name, n_conf)
printf("# [test] Reading configuration at %s\n", conf_name)
u = load_ildg(L, conf_name)

-- Plaquette
printf("# [test] Plaquette (original) = %12.10f\n", plaquette_full(u))

-- ************************************************************************************
-- * make the light / strange solver
-- ************************************************************************************
local light_propagator_packed_list   = {}
light_solver   = make_mg_solver (L, u, mg_block, mg_max_abserr, mg_max_relerr, quark_bc, kappa_l, csw )

-- ************************************************************************************ 
-- * INVERSIONS FOR FWD PROPAGATORS AND SEQUENTIAL PROPAGATORS;
-- * CONTRACTIONS FOR 2-POINT AND 3-POINT FUNCTIONS USING ONLY FWD AND SEQ
-- *
-- * loop on base source locations
-- ************************************************************************************
for i_src, v_src in ipairs(source_locations) do

  local src_loc_timer = timer("Time for each source location")
  local t   = v_src["t"]
  local pos = v_src["pos"]
  printf("# [test] base source location[%d] = (%d, %d, %d) t=%d\n", i_src, pos[1], pos[2], pos[3], t)
  -- ************************************************************************************
  -- ************************************************************************************
  light_propagator_packed_list[i_src]   = L:DiracPropagator()


  -- ************************************************************************************
  -- * loop on coherent source locations
  -- ************************************************************************************
  for i_coherent = 0, n_coherent_source - 1 do

    -- * set original (i_coherent = 0) or coherent source location (i_coherent > 0)
   
    local t_coherent = ( t + i_coherent * (L[3]/n_coherent_source) ) % L[3]

    -- * set the shifted, coherent source location
    local pos_coherent = {}
    pos_coherent[1] = ( pos[1]  + i_coherent * (L[0] / n_coherent_source) ) % L[0]
    pos_coherent[2] = ( pos[2]  + i_coherent * (L[1] / n_coherent_source) ) % L[1]
    pos_coherent[3] = ( pos[3]  + i_coherent * (L[2] / n_coherent_source) ) % L[2]

    local source_position = vector.int(4)
    source_position[0] = pos_coherent[1]
    source_position[1] = pos_coherent[2]
    source_position[2] = pos_coherent[3]
    source_position[3] = t_coherent

    -- ************************************************************************************
    -- * point-to-all forward propagator
    -- ************************************************************************************

    local light_propagator = L:DiracPropagator()

    -- * set a point source 
    local ttimer = timer("light forward source")
    local dv = point_source (L, pos_coherent[1], pos_coherent[2], pos_coherent[3], t_coherent )
    local source = dv
    ttimer("done")

    -- ************************************************************************************
    -- * light forward propagator
    -- ************************************************************************************
    ttimer = timer("light forward inversion")
    light_propagator = light_solver(source, kappa_l)
    ttimer("done")

    -- * delete the source
    source = nil
    -- ************************************************************************************
    -- * pack the propagator from coherent source
    -- ************************************************************************************
    pack_propagator (L, light_propagator_packed_list[i_src], light_propagator, t_coherent, L[3]/(2*n_coherent_source)  )   
    -- ************************************************************************************
    -- ************************************************************************************
    light_propagator = nil
    show_mem("# checkpoint 1.5")    

  end  -- of loop on coherent source locations
  -- ************************************************************************************
  -- * inversion on sequential source
  -- *  - light after light
  -- *  - light after strange
  -- *  - for given base source location + (n_coherent - 1) coherent source locations
  -- *
  -- * contractions using sequential propagator
  -- *   - for each coherent source locations
  -- *
  -- *
  -- * make the list of light fwd propagators for
  -- *  all coherent source locations given the base source location
  -- ************************************************************************************

  -- ************************************************************************************
  -- * sequential - light - light
  -- ************************************************************************************

  -- ************************************************************************************
  -- * loop on sequential source momenta
  -- ************************************************************************************
  for i_seq_mom, seq_mom in ipairs(sequential_source_momentum_list) do

    -- * local field exp(i p x)
    -- *   p = seq_mom sequential source momentum
    -- *   x = sink of light propagator
    local px = (2 * math.pi * seq_mom[1]) / L[0]
    local py = (2 * math.pi * seq_mom[2]) / L[1]
    local pz = (2 * math.pi * seq_mom[3]) / L[2]
    local phase = ( (L:Real(L:pcoord(0)) ) * px +
                    (L:Real(L:pcoord(1)) ) * py +
                    (L:Real(L:pcoord(2)) ) * pz):expi()
            
    -- ************************************************************************************
    -- * loop on Dirac gamma matrix at sequential vertex
    -- ************************************************************************************
    for isequential_source_gamma, sequential_source_gamma in pairs(sequential_source_gamma_list ) do

      -- *  seq gamma = gamma in binary counting                     * sign
      local seq_gamma = gamma{n = sequential_source_gamma.gamma[1] } * sequential_source_gamma.gamma[2]
          
      local seq_source_mom_timer = timer("seq_source_mom")
      printf("#[test]  sequential source momentum(%d) = (%d, %d, %d) gamma %2d \n",
      i_seq_mom, seq_mom[1], seq_mom[2], seq_mom[3], sequential_source_gamma.gamma[1])

      local light_sequential_propagator = L:DiracPropagator()

      -- ************************************************************************************
      -- * prepare sequential propagator
      -- ************************************************************************************
      local seq_source     = L:DiracPropagator()
      local seq_source_mom = L:DiracPropagator()
  
  
      -- ************************************************************************************
      -- * build the sequential source
      -- *   seq source at t = propagator at t
      -- *
      -- ************************************************************************************
      for i_coherent = 0, n_coherent_source - 1 do
        local t_coherent = ( t + i_coherent * (L[3]/n_coherent_source) ) % L[3]
        printf("# [test] adding source timeslice %d to sequential source list from packed propagator\n", t_coherent )
        L:Subset{axis=3, position = t_coherent}:where(function()
          seq_source:set( light_propagator_packed_list[i_src])
        end)
      end
      -- * seq_source_mom <- exp(i p x) g5 J seq_source_mom
      -- seq_source_mom = phase * ( seq_gamma * seq_source_mom )
      seq_source_mom = phase * seq_source
      seq_source = seq_gamma * seq_source_mom
      -- * seq_source_mom <- J exp(i p x) g5 J seq_source_mom
      for icol = 0, 2 do
        for ispin = 0, 3 do
          local v = seq_source[{c=icol,d=ispin}]
          seq_source_mom[{c=icol,d=ispin}] = v
          v = nil
        end
      end

      seq_source_mom_timer("done")
        
      -- ******************************************************
      -- * invert on the sequential momentum source
      -- ******************************************************
      local ttimer = timer("sll inversion")
      light_sequential_propagator = light_solver(seq_source_mom, kappa_l)
      ttimer("done")

      seq_source_mom = nil
    end    -- * end of loop on sequential source gamma matrices
  end      -- * end of loop on sequential source momenta
  src_loc_timer("done")
end        -- * end of loop on source locations
total_timer("done")
